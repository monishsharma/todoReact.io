{"version":3,"sources":["hoc/Aux.js","Component/ListTodo/ListTodo.js","Component/Todo/Todo.js","App.js","serviceWorker.js","index.js"],"names":["aux","props","children","ListTodo","ListGroup","key","itemKey","Item","className","complete","item","onClick","clicked","style","float","fontSize","cursor","Todo","state","items","addTodoHandler","_inputElement","value","newItems","text","Date","now","Completed","setState","prevState","concat","deleteTodoHandler","index","filteredItems","filter","onCheckedHandler","FilterTodoHandler","type","todoLists","this","map","todo","Form","Check","position","marginTop","onChange","Aux","Container","Row","Col","md","InputGroup","width","FormControl","ref","a","placeholder","aria-label","aria-describedby","Append","Button","variant","flexGrow","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eef46102.chunk.js","sourcesContent":["const aux = (props) => props.children;\n\nexport default aux;","import React from 'react';\nimport { ListGroup } from 'react-bootstrap'\nconst ListTodo = (props) => {\n    return (\n        <ListGroup key={props.itemKey}>\n            <ListGroup.Item className = {props.complete ? 'completed' : ''} >{props.item} <span onClick = {props.clicked} style = {{float :'right',fontSize:'20px',cursor :'pointer'}}>&times;</span></ListGroup.Item>\n        </ListGroup>\n    )\n}\n\nexport default ListTodo;","import React, { Component } from 'react';\nimport Aux from '../../hoc/Aux'\nimport Listodo from '../ListTodo/ListTodo'\nimport { InputGroup, FormControl, Button, Container, Row, Col, Form } from 'react-bootstrap'\nclass Todo extends Component {\n\n    state = {\n        items: [],\n    }\n\n    addTodoHandler = () => {\n        if (this._inputElement.value !== \"\") {\n            let newItems = {\n                text: this._inputElement.value,\n                key: Date.now(),\n                Completed: false\n            }\n            this.setState((prevState) => {\n                return {\n                    items: prevState.items.concat(newItems)\n                }\n            })\n            this._inputElement.value = \"\"\n        }\n    }\n\n    deleteTodoHandler = (index, key) => {\n\n        const filteredItems = this.state.items.filter(item => {\n            return item.key !== key\n        })\n        this.setState({ items: filteredItems })\n    }\n\n    onCheckedHandler = (index, key) => {\n        const filteredItems = this.state.items;\n        if (this.state.items[index].Completed === true) {\n            filteredItems[index].Completed = false\n        }\n        else {\n            filteredItems[index].Completed = true\n        }\n        this.setState({ items: filteredItems })\n    }\n    FilterTodoHandler = (type) => {\n        // const All_Todo = 'All_Todo';\n        // const Active_Todo = 'Active_Todo';\n        // const Completed_Todo = 'Completed_Todo';\n        // const todos = this.state.items;\n        // let filter;\n        // switch (type) {\n        //     case Active_Todo:\n        //         filter = todos.filter(todo => {\n        //             if (!todo.Completed) {\n        //                 return todo;\n        //             }\n        //         });\n        //         break;\n        //     case Completed_Todo:\n        //         filter = todos.filter(todo => {\n        //             if (todo.Completed) {\n        //                 return todo;\n        //             }\n        //         });\n        //         break;\n        //     default:\n        //         filter = null;\n        //         break;\n        // }\n\n        // this.setState({ items: [...this.state.items,filter] })\n        // console.log(this.state)\n\n    }\n    render() {\n        let todoLists = {}\n        todoLists = this.state.items.map((todo, index) => {\n            return (\n                <div key={todo.key}>\n                    <Form>\n                        <Form.Check style={{ position: 'absolute', marginTop: '20px' }} onChange={() => { this.onCheckedHandler(index, todo.key) }} ></Form.Check>\n                    </Form>\n                    <Listodo complete={todo.Completed} item={todo.text} itemKey={todo.key} clicked={() => { this.deleteTodoHandler(index, todo.key) }}></Listodo>\n                </div>\n            )\n        })\n\n        return (\n            <Aux>\n                <Container>\n                    <Row>\n                        <Col md={6} className=\"todo\">\n                            <h1>React Todo App</h1>\n                            <InputGroup className=\"mb-4 \" style={{ width: '70%' }}>\n                                <FormControl\n                                    ref={(a) => { this._inputElement = a }}\n                                    placeholder=\"What to do ?\"\n                                    aria-label=\"Recipient's username\"\n                                    aria-describedby=\"basic-addon2\"\n                                />\n                                <InputGroup.Append >\n                                    <Button onClick={() => { this.addTodoHandler() }} variant=\"outline-secondary\">Submit</Button>\n                                </InputGroup.Append>\n                            </InputGroup>\n                        </Col>\n\n                        <Col md={6} style={{ marginTop: '50px' }}>\n                            <Container>\n                                <Row >\n                                    <Col style={{ flexGrow: '0' }}>\n                                        <Button className=\"btnFilter\" onClick={() => { this.FilterTodoHandler('All_Todo') }}>All</Button>\n                                    </Col>\n                                    <Col style={{ flexGrow: '0' }}>\n                                        <Button className=\"btnFilter\" onClick={() => { this.FilterTodoHandler('Active_Todo') }}>Active</Button>\n                                    </Col>\n                                    <Col style={{ flexGrow: '0' }}>\n                                        <Button className=\"btnFilter\" onClick={() => { this.FilterTodoHandler('Completed_Todo') }}>Completed</Button>\n                                    </Col>\n                                </Row>\n                                {todoLists}\n                            </Container>\n                        </Col>\n                    </Row>\n                </Container>\n            </Aux>\n\n        )\n    }\n}\n\nexport default Todo;","import React from 'react';\nimport Todo from './Component/Todo/Todo'\nimport './App.css';\nfunction App() {\n  return (\n      <Todo />\n\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}